module.exports = {
  1: '1‚É£', 2: '2‚É£', 3: '3‚É£', 
  4: '4‚É£', 5: '5‚É£', 6: '6‚É£', 
  7: '7‚É£', 8: '8‚É£', 9: '9Ô∏è‚É£',
  10: 'üîü',
  name: 'poll',
  regex: /poll|vote/,
  args: ['<–í–æ–ø—Ä–æ—Å; –í–∞—Ä–∏–∞–Ω—Ç1; –í–∞—Ä–∏–∞–Ω—Ç2; –∏ —Ç. –¥.>'],
  example: 'poll –ü–µ–ø—Å–∏ –∏–ª–∏ –∫–æ–ª–∞?; –ü–µ–ø—Å–∏; –ö–æ–ª–∞; –í–æ–¥–∏—á–∫–∞',
  desc: '–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
  run: (message, args) => {
    const poll = message.content.slice(Bot.prefixes[0].length).trim().split(/;+/g);

    if (!poll[1]) return Bot.err(`–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è, –ª–æ–ª.`);
    const question = args.join(' ').match(/(.*?);/g)[0].slice(0, -1);
    if (poll[11]) return Bot.err('–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å —Å –±–æ–ª–µ–µ —á–µ–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏');

    let variants = '';
    let reactArray = [];

    for (let i = 1; i < poll.length && poll[i].length > 0; i++) {
      variants += `${module.exports[i]} ${poll[i]}\n`;
      reactArray.push(module.exports[i]);
    };

    message.channel.send(`**:bar_chart: ${question.trim()}**\n\n${variants}\n**–ê–≤—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è - \`${message.author.tag}\`**`).catch(msg => {
      Bot.err('–õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º');
    }).then(msg => {
      Bot.multipleReact(msg, reactArray);
    });
  }
};